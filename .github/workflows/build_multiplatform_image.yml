on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      ruby-ver:
        required: true
        type: string
      debian-rel:
        required: true
        type: string
      runners:
        required: true
        type: string
env:
  TAG: ${{ inputs.ruby-ver }}-${{ inputs.debian-rel }}
  IMAGE: ${{ inputs.image }}
jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        runner: ${{ fromJSON(inputs.runners) }}
    runs-on: ${{ matrix.runner }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup
      run: |
        set -euxo pipefail

        dockerfile='${{ inputs.ruby-ver }}/${{ inputs.debian-rel }}/Dockerfile'
        # resolve symlinks
        dockerfile=$(realpath --relative-to "$(pwd)" "$dockerfile")
        if [[ -f "$dockerfile" ]]; then
            echo "Dockerfile found!"
        else
            echo "Couldn't find a Dockerfile!"
            exit 1
        fi
        echo "DOCKERFILE=$dockerfile" >> "$GITHUB_ENV"

        platform=""
        uname="$(uname -m)"
        case "$uname" in
            x86_64)  platform="amd64" ;;
            aarch64) platform="arm64" ;;
            *)       echo "Unknown uname -m: '$uname'" ;;
        esac

        if [[ -n $platform ]]; then
            echo "PLATFORM=$platform" >> $GITHUB_ENV
            echo "BUILD_NAME=${TAG}-${platform}" >> "$GITHUB_ENV"
            echo "CACHE_IMAGE=${IMAGE}:${TAG}-${platform}-buildcache" \
              >> "$GITHUB_ENV"
        else
            exit 1;
        fi
    - name: Generate Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.image }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build & push
      id: build
      uses: docker/build-push-action@v6
      with:
        push: true
        file: ${{ env.DOCKERFILE }}
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ inputs.image }}
        platforms: linux/${{ env.PLATFORM }}
        build-args: |
          DEBIAN_REL=${{ inputs.debian-rel }}
          RUBY_VER=${{ inputs.ruby-ver }}
        cache-from: type=registry,ref=${{ env.CACHE_IMAGE }},mode=max
        cache-to: type=registry,ref=${{ env.CACHE_IMAGE }},mode=max
        outputs: type=image,push-by-digest=true,name-canonical=true,push=true
    - name: Export digest
      run: |
        mkdir -p ${{ runner.temp }}/digests
        digest='${{ steps.build.outputs.digest }}'
        touch "${{ runner.temp }}/digests/${digest#sha256:}"
    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.BUILD_NAME }}
        path: ${{ runner.temp }}/digests/*
        if-no-files-found: error
        retention-days: 1
  merge:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ env.TAG }}-*
          merge-multiple: true
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.image }}
          tags: |
            type=raw,${{ env.TAG }}
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          set -eux
          tags=$( \
              jq -cr '.tags | map("-t " + .) | join(" ")' \
                  <<< "$DOCKER_METADATA_OUTPUT_JSON" \
          )
          docker buildx imagetools create $tags \
            $(printf '${{ inputs.image }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect "${IMAGE}:${TAG}"
